{"id": "1001394", "question": "为什么lightgbm比xgb快？", "description": "<div class=\"col-md-11 col-xs-10\"><p>为什么lightgbm比xgb快那么多？感觉速度可能是xgb的5倍，但是精度、auc什么的都差不多。</p><p>lightgbm是用了什么独家窍门吗？</p><p><br/></p></div>", "viewer": 6692, "tags": ["统计/机器学习", "监督式学习"], "answers": [{"lvl1_answer": "<div class=\"col-md-11 col-xs-10 p-r\"><p><span style=\"font-size: 14px;\">LightGBM采用了基于梯度的单边采样（GOSS）的方法。</span></p><p><span style=\"font-size: 14px;\">在过滤数据样例寻找分割值时，LightGBM 使用的是全新的技术：基于梯度的单边采样（GOSS）；而 XGBoost 则通过预分类算法和直方图算法来确定最优分割。</span></p><p><span style=\"font-size: 14px;\">在 Adaboost 中，样本权重是展示样本重要性的很好的指标。但在梯度提升决策树（GBDT）中，并没有天然的样本权重，因此 Adaboost 所使用的采样方法在这里就不能直接使用了，这时我们就需要基于梯度的采样方法。</span></p><p><span style=\"font-size: 14px;\">梯度表征损失函数切线的倾斜程度，所以自然推理到，如果在某些意义上数据点的梯度非常大，那么这些样本对于求解最优分割点而言就非常重要，因为算其损失更高。</span></p><p><span style=\"font-size: 14px;\">GOSS 保留所有的大梯度样例，并在小梯度样例上采取随机抽样。比如，假如有 50 万行数据，其中 1 万行数据的梯度较大，那么我的算法就会选择（这 1 万行梯度很大的数据+x% 从剩余 49 万行中随机抽取的结果）。如果 x 取 10%，那么最后选取的结果就是通过确定分割值得到的，从 50 万行中抽取的 5.9 万行。</span></p><p><span style=\"font-size: 14px;\">在这里有一个基本假设：如果训练集中的训练样例梯度很小，那么算法在这个训练集上的训练误差就会很小，因为训练已经完成了。</span></p><p><span style=\"font-size: 14px;\">为了使用相同的数据分布，在计算信息增益时，GOSS 在小梯度数据样例上引入一个常数因子。因此，GOSS 在减少数据样例数量与保持已学习决策树的准确度之间取得了很好的平衡。</span></p><p><span style=\"font-size: 14px;\">上文部分转载</span><a href=\"https://www.jiqizhixin.com/articles/2018-03-18-4\" style=\"font-size: 1rem;\" target=\"_blank\"><span style=\"font-size: 14px;\">机器之心</span></a></p><p><span style=\"font-size: 14px;\">原论文链接如下</span></p><p><a href=\"https://papers.nips.cc/paper/6907-lightgbm-a-highly-efficient-gradient-boosting-decision-tree.pdf\" target=\"_blank\"><span style=\"font-size: 14px;\">LightGBM: A Highly Efficient Gradient Boosting Decision Tree</span></a></p><p><br/><br/></p></div>", "lvl2_answer": ["补充几个：\n1.互斥特征绑定（EFB），如果说GOSS减少了样本数量，那么EFB则减少了特征数量。\n2.lightGBM原生支持类别特征，生长过程中，自动将类别划分到俩个子集，并且可以以O(NlogN)的复杂度找到最优划分。\n3.leaf-wise按叶生长，更加高效，当然也容易过拟合。\n4.优化了并行的通信。\n而预排序，直方图做差，稀疏识别在xgboost,lightgbm中都有体现"]}, {"lvl1_answer": "<div class=\"col-md-11 col-xs-10 p-r\"><p>从纯工程的角度来说，lightgbm更好地处理了多进程（毕竟是微软）。</p><p>从优化角度来说，对数值特征找划分点时，lightgbm没有去穷举每个可能的数值，而是利用直方图只去尝试很少数的划分点。</p><p>抛砖引玉。</p></div>", "lvl2_answer": []}]}