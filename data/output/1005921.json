{"id": "1005921", "question": "sklearn，numpy里有没有计算ndcg的函数？", "description": "<div class=\"col-md-11 col-xs-10\"><p>sklearn，numpy里有没有计算ndcg的函数？</p></div>", "viewer": 4814, "tags": ["统计/机器学习", "推荐系统", "模型验证", "Python"], "answers": [{"lvl1_answer": "<div class=\"col-md-11 col-xs-10 p-r\"><p>sklearn里并没有，需要自己实现的，kaggle上有人写过，链接在<a href=\"https://www.kaggle.com/davidgasquez/ndcg-scorer\" target=\"_blank\">这里</a></p><p>代码在这里</p><pre><code class=\"python\">import numpy as np\r\nfrom sklearn.preprocessing import LabelBinarizer\r\nfrom sklearn.metrics import make_scorer\r\n\r\n\r\ndef dcg_score(y_true, y_score, k=5):\r\n    \"\"\"Discounted cumulative gain (DCG) at rank K.\r\n\r\n    Parameters\r\n    ----------\r\n    y_true : array, shape = [n_samples]\r\n        Ground truth (true relevance labels).\r\n    y_score : array, shape = [n_samples, n_classes]\r\n        Predicted scores.\r\n    k : int\r\n        Rank.\r\n\r\n    Returns\r\n    -------\r\n    score : float\r\n    \"\"\"\r\n    order = np.argsort(y_score)[::-1]\r\n    y_true = np.take(y_true, order[:k])\r\n\r\n    gain = 2 ** y_true - 1\r\n\r\n    discounts = np.log2(np.arange(len(y_true)) + 2)\r\n    return np.sum(gain / discounts)\r\n\r\n\r\ndef ndcg_score(ground_truth, predictions, k=5):\r\n    \"\"\"Normalized discounted cumulative gain (NDCG) at rank K.\r\n\r\n    Normalized Discounted Cumulative Gain (NDCG) measures the performance of a\r\n    recommendation system based on the graded relevance of the recommended\r\n    entities. It varies from 0.0 to 1.0, with 1.0 representing the ideal\r\n    ranking of the entities.\r\n\r\n    Parameters\r\n    ----------\r\n    ground_truth : array, shape = [n_samples]\r\n        Ground truth (true labels represended as integers).\r\n    predictions : array, shape = [n_samples, n_classes]\r\n        Predicted probabilities.\r\n    k : int\r\n        Rank.\r\n\r\n    Returns\r\n    -------\r\n    score : float\r\n\r\n    Example\r\n    -------\r\n    &gt;&gt;&gt; ground_truth = [1, 0, 2]\r\n    &gt;&gt;&gt; predictions = [[0.15, 0.55, 0.2], [0.7, 0.2, 0.1], [0.06, 0.04, 0.9]]\r\n    &gt;&gt;&gt; score = ndcg_score(ground_truth, predictions, k=2)\r\n    1.0\r\n    &gt;&gt;&gt; predictions = [[0.9, 0.5, 0.8], [0.7, 0.2, 0.1], [0.06, 0.04, 0.9]]\r\n    &gt;&gt;&gt; score = ndcg_score(ground_truth, predictions, k=2)\r\n    0.6666666666\r\n    \"\"\"\r\n    lb = LabelBinarizer()\r\n    lb.fit(range(len(predictions) + 1))\r\n    T = lb.transform(ground_truth)\r\n\r\n    scores = []\r\n\r\n    # Iterate over each y_true and compute the DCG score\r\n    for y_true, y_score in zip(T, predictions):\r\n        actual = dcg_score(y_true, y_score, k)\r\n        best = dcg_score(y_true, y_true, k)\r\n        score = float(actual) / float(best)\r\n        scores.append(score)\r\n\r\n    return np.mean(scores)\r\n\r\n\r\n# NDCG Scorer function\r\nndcg_scorer = make_scorer(ndcg_score, needs_proba=True, k=5)</code></pre></div>", "lvl2_answer": ["这个靠谱！"]}]}