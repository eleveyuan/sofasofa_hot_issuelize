{"id": "1003298", "question": "用tensorflow实现强化学习的dql算法报错：tensorflow.python.framework.errors_impl.InternalError: Could not find valid device for node. Node: {{node OneHot}} = OneHot[T=DT_FLOAT, TI=DT_FLOAT, axis=-1](dummy_input, dummy_input, dummy_input, dummy_input)", "description": "<div class=\"col-md-11 col-xs-10\"><p>代码：</p><p>import tensorflow as tf</p><p>import numpy as np</p><p>import gym</p><p>import random</p><p>from collections import deque</p><p><br/></p><p>tf.enable_eager_execution()</p><p>num_episodes = 500</p><p>num_exploration_episodes = 100</p><p>max_len_episode = 1000</p><p>batch_size = 32</p><p>learning_rate = 1e-3</p><p>gamma =1</p><p>initial_epsilon = 1</p><p>final_epsilon = 0.01</p><p><br/></p><p><br/></p><p>class QNetwork(tf.keras.Model):</p><p>    def __init__(self):</p><p>        super().__init__()</p><p>        self.dense1 = tf.keras.layers.Dense(units= 24, activation = tf.nn.relu)</p><p>        self.dense2 = tf.keras.layers.Dense(units= 24, activation = tf.nn.relu)</p><p>        self.dense3 = tf.keras.layers.Dense(units = 2)</p><p><br/></p><p>    def call(self, inputs):</p><p>        x = self.dense1(inputs)</p><p>        x = self.dense2(x)</p><p>        x= self.dense3(x)</p><p>        return x</p><p><br/></p><p>    def predict(self, inputs):</p><p>        q_values = self(inputs)</p><p>        return tf.argmax(q_values, axis=-1)</p><p><br/></p><p><br/></p><p><br/></p><p>env = gym.make('CartPole-v1')</p><p>model = QNetwork()</p><p>optimizer = tf.train.AdamOptimizer(learning_rate)</p><p>replay_buffer = deque(maxlen = 10000)</p><p>epsilon = initial_epsilon</p><p>for episode_id in range(num_episodes):</p><p>    state = env.reset()</p><p>    episode = max(</p><p>        initial_epsilon* (num_exploration_episodes - episode_id) / num_exploration_episodes,</p><p>        final_epsilon</p><p>    )</p><p><br/></p><p>    for t in range(max_len_episode):</p><p>        env.render()</p><p>        if random.random() &lt; epsilon:</p><p>            action = env.action_space.sample()</p><p>        else:</p><p>            action = model.predict(</p><p>                tf.constant(np.expand_dims(state,axis=0, dtype = tf.float32)).numpy()</p><p>            )</p><p>            action = action[0]</p><p><br/></p><p>        next_state, reward, done, info = env.step(action)</p><p>        reward = -10. if done else reward</p><p>        replay_buffer.append((state,action,reward,next_state,done))</p><p>        state = next_state</p><p><br/></p><p>        if done==1:</p><p>            print('episode %d, epsilon %f, score %d' % (episode_id, epsilon, t))</p><p>            break</p><p><br/></p><p>        if len(replay_buffer) &gt;=batch_size:</p><p>            batch_state, batch_action, batch_reward, batch_next_state, batch_done = [np.array(a, dtype=np.float32) for a in zip(*random.sample(replay_buffer, batch_size))]</p><p><br/></p><p>            q_value = model(tf.constant(batch_next_state, dtype = tf.float32))</p><p>            y = batch_reward + (gamma* tf.reduce_max(q_value, axis=1))*(1-batch_done)</p><p><br/></p><p>            with tf.GradientTape() as tape:</p><p>                loss =  tf.losses.mean_squared_error(</p><p>                    lables=y,</p><p>                    predictions = tf.reduce_sum(model(tf.constant(batch_state)) * tf.one_hot(batch_action, depth=2), axis=1)</p><p>                )</p><p><br/></p><p>            grads = tape.gradient(loss, model.variables)</p><p>            optimizer.apply_gradients(grads_and_vars = zip(grads,model.variables))</p><p><br/></p><p>报错：/home/kalarea/.conda/envs/py35/bin/python /home/kalarea/PycharmProjects/dql_demo/dpq_cartplie.py</p><p>/home/kalarea/.conda/envs/py35/lib/python3.5/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.</p><p>  from ._conv import register_converters as _register_converters</p><p>episode 0, epsilon 1.000000, score 12</p><p>2018-10-15 12:54:59.165871: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA</p><p>Traceback (most recent call last):</p><p>  File \"/home/kalarea/PycharmProjects/dql_demo/dpq_cartplie.py\", line 77, in <module></module></p><p>    predictions = tf.reduce_sum(model(tf.constant(batch_state)) * tf.one_hot(batch_action, depth=2),axis=1)</p><p>  File \"/home/kalarea/.conda/envs/py35/lib/python3.5/site-packages/tensorflow/python/ops/array_ops.py\", line 2439, in one_hot</p><p>    name)</p><p>  File \"/home/kalarea/.conda/envs/py35/lib/python3.5/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 4563, in one_hot</p><p>    _six.raise_from(_core._status_to_exception(e.code, message), None)</p><p>  File \"<string>\", line 3, in raise_from</string></p><p>tensorflow.python.framework.errors_impl.InternalError: Could not find valid device for node.</p><p>Node: {{node OneHot}} = OneHot[T=DT_FLOAT, TI=DT_FLOAT, axis=-1](dummy_input, dummy_input, dummy_input, dummy_input)</p><p>All kernels registered for op OneHot :</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_VARIANT]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_VARIANT]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_VARIANT]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_RESOURCE]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_RESOURCE]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_RESOURCE]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_STRING]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_STRING]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_STRING]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_BOOL]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_BOOL]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_BOOL]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_COMPLEX128]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_COMPLEX128]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_COMPLEX128]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_COMPLEX64]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_COMPLEX64]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_COMPLEX64]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_DOUBLE]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_DOUBLE]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_DOUBLE]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_FLOAT]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_FLOAT]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_FLOAT]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_BFLOAT16]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_BFLOAT16]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_BFLOAT16]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_HALF]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_HALF]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_HALF]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_INT8]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_INT8]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_INT8]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_UINT8]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_UINT8]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_UINT8]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_INT16]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_INT16]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_INT16]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_UINT16]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_UINT16]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_UINT16]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_INT32]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_INT32]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_INT32]</p><p>  device='CPU'; TI in [DT_INT64]; T in [DT_INT64]</p><p>  device='CPU'; TI in [DT_INT32]; T in [DT_INT64]</p><p>  device='CPU'; TI in [DT_UINT8]; T in [DT_INT64]</p><p> [Op:OneHot] name: one_hot/</p><p>Exception ignored in: <bound at=\"\" method=\"\" object=\"\" of=\"\" viewer.__del__=\"\">&gt;</bound></p><p>Traceback (most recent call last):</p><p>  File \"/home/kalarea/gym/gym/envs/classic_control/rendering.py\", line 143, in __del__</p><p>  File \"/home/kalarea/gym/gym/envs/classic_control/rendering.py\", line 62, in close</p><p>  File \"/home/kalarea/.conda/envs/py35/lib/python3.5/site-packages/pyglet/window/xlib/__init__.py\", line 480, in close</p><p>  File \"/home/kalarea/.conda/envs/py35/lib/python3.5/site-packages/pyglet/gl/xlib.py\", line 345, in destroy</p><p>  File \"/home/kalarea/.conda/envs/py35/lib/python3.5/site-packages/pyglet/gl/base.py\", line 334, in destroy</p><p>  File \"/home/kalarea/.conda/envs/py35/lib/python3.5/site-packages/pyglet/gl/xlib.py\", line 335, in detach</p><p>  File \"/home/kalarea/.conda/envs/py35/lib/python3.5/site-packages/pyglet/gl/lib.py\", line 97, in errcheck</p><p>  File \"<frozen importlib._bootstrap=\"\">\", line 968, in _find_and_load</frozen></p><p>  File \"<frozen importlib._bootstrap=\"\">\", line 953, in _find_and_load_unlocked</frozen></p><p>  File \"<frozen importlib._bootstrap=\"\">\", line 887, in _find_spec</frozen></p><p>TypeError: 'NoneType' object is not iterable</p><p><br/></p><p>Process finished with exit code 1</p><p><br/></p></div>", "viewer": 7215, "tags": ["统计/机器学习", "Python", "TensorFlow", "强化学习"], "answers": [{"lvl1_answer": "<div class=\"col-md-11 col-xs-10 p-r\"><p>我也是看的一个增强学习小游戏代码，貌似win10下gpu版tensorflow碰到tf.one_hot会出问题。我的解决方式是换个one_hot的等效方式，我用的是from keras.utils.np_utils import to_categorical。keras确实要精简不少。也可以自己定义实现one_hot<br/></p></div>", "lvl2_answer": []}]}