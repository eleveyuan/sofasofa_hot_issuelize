{"id": "1001313", "question": "sklearn里怎么做多项式回归？", "description": "<div class=\"col-md-11 col-xs-10\"><p>sklearn里怎么做多项式回归？搜了一下，感觉里面没有现成的多项式回归。</p><p><br/></p></div>", "viewer": 6224, "tags": ["统计/机器学习", "回归分析", "Python"], "answers": [{"lvl1_answer": "<div class=\"col-md-11 col-xs-10 p-r\"><p>可以参考<a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.polyfit.html\" target=\"_blank\">numpy.polyfit</a></p><p>下面就是个用polyfit做三次多项式回归的例子</p><pre><code class=\"python\">&gt;&gt;&gt; x = np.array([0.0, 1.0, 2.0, 3.0,  4.0,  5.0])\r\n&gt;&gt;&gt; y = np.array([0.0, 0.8, 0.9, 0.1, -0.8, -1.0])\r\n&gt;&gt;&gt; coef = np.polyfit(x, y, 3)\r\n&gt;&gt;&gt; coef\r\narray([ 0.08703704, -0.81349206,  1.69312169, -0.03968254])</code></pre><p>coef是回归系数，按照幂次先高后低排列。</p><p><br/></p></div>", "lvl2_answer": ["np.polyfit有点慢，有好的解决方法吗", "数据量很大吗？特征数、样本数大概什么规模"]}, {"lvl1_answer": "<div class=\"col-md-11 col-xs-10 p-r\"><p>sklearn里没有多项式回归，只能靠自己造轮子了。你需要人工生成那些高次项，比如说你要做一个像</p><p>$$Y= a_0 + a_1x + a_2x^2 + a_3x^3$$</p><p>的三次多项式回归。那么你就需要人工制造出$x^2$和$x^3$这两个特征，然后再做sklearn里的回归。</p><p>可以参考如下</p><pre><code class=\"python\">from sklearn.linear_model import LinearRegression\r\nX_new = pd.DataFrame()\r\nX_new['x'] = x\r\nX_new['x2'] = X_new['x'] ** 2\r\nX_new['x2'] = X_new['x'] ** 3\r\nreg = LinearRegression()\r\nreg.fit(X_new, y)</code></pre><p><br/></p></div>", "lvl2_answer": []}, {"lvl1_answer": "<div class=\"col-md-11 col-xs-10 p-r\"><p>这个问题不是编程的问题，而是统计学中的本质问题，在统计理论中，对非线性回归模型，比如多项式、logsitic回归、对数回归等等，都可以转化为线性回归模型来求解的</p><p>所以，这个不是现有程序的问题，而是基本思想的问题</p></div>", "lvl2_answer": ["同意，广义线性模型，本质上都是线性模型"]}]}